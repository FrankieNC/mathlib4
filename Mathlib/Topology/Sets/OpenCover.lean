/-
Copyright (c) 2025 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/

import Mathlib.Topology.Sets.Opens

/-!
# Open covers
-/

open Set Topology

namespace TopologicalSpace

/-- An indexed family of open sets whose union is `X`. -/
structure OpenCover (Œπ X : Type*) [TopologicalSpace X] where
  toFun : Œπ ‚Üí Opens X
  iSup_eq_top' : iSup toFun = ‚ä§

variable {Œπ X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]

/-- An open cover is a special kind of function into  opens. -/
instance : FunLike (OpenCover Œπ X) Œπ (Opens X) :=
  ‚ü®OpenCover.toFun, fun _ _ ‚Ü¶ (OpenCover.mk.injEq ..).mpr‚ü©

namespace OpenCover

@[simp] lemma coe_mk {f : Œπ ‚Üí Opens X} (h : iSup f = ‚ä§) : mk f h = f := rfl

variable (u : OpenCover Œπ X)

lemma iSup_eq_top : ‚®Ü i, u i = ‚ä§ := u.iSup_eq_top'

lemma iSup_set_eq_univ : ‚ãÉ i, (u i : Set X) = univ := by
  simpa [‚Üê SetLike.coe_set_eq] using u.iSup_eq_top

/-- Pullback of a covering of `Y` by a continuous map `X ‚Üí Y`, giving a covering of `X` with the
same index type. -/
def comap (u : OpenCover Œπ Y) (f : C(X, Y)) : OpenCover Œπ X :=
  ‚ü®fun i ‚Ü¶ (u i).comap f, by simp [‚Üê preimage_iUnion, iSup_set_eq_univ]‚ü©

lemma exists_mem (a : X) : ‚àÉ i, a ‚àà u i := by
  simpa [‚Üê u.iSup_set_eq_univ] using mem_univ a

lemma exists_mem_nhds (a : X) : ‚àÉ i, (u i : Set X) ‚àà ùìù a :=
  match u.exists_mem a with | ‚ü®i, hi‚ü© => ‚ü®i, (u i).isOpen.mem_nhds hi‚ü©

end OpenCover

end TopologicalSpace
