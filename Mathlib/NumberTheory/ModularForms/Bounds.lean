/-
Copyright (c) 2025 David Loeffler. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: David Loeffler
-/
import Mathlib.NumberTheory.Modular
import Mathlib.NumberTheory.ModularForms.QExpansion

/-!
# Bounds for cusp forms
-/

open UpperHalfPlane Filter Topology
open scoped Modular MatrixGroups ComplexConjugate ModularForm


namespace ModularGroup

/-- The standard fundamental domain truncated at height `y`. -/
def truncatedFundamentalDomain (y : ‚Ñù) : Set ‚Ñç := { œÑ | œÑ ‚àà ùíü ‚àß œÑ.im ‚â§ y }

/-- Explicit description of the truncated fundamental domain as a subset of `‚ÑÇ`, given by
obviously closed conditions. -/
lemma coe_truncatedFundamentalDomain (y : ‚Ñù) :
    Subtype.val '' truncatedFundamentalDomain y =
    {z | 0 ‚â§ z.im ‚àß z.im ‚â§ y ‚àß |z.re| ‚â§ 1 / 2 ‚àß 1 ‚â§ ‚Äñz‚Äñ} := by
  ext z
  constructor
  ¬∑ rintro ‚ü®‚ü®z, hz‚ü©, h, rfl‚ü©
    exact ‚ü®hz.le, h.2, h.1.2, by simpa [Complex.normSq_eq_norm_sq] using h.1.1‚ü©
  ¬∑ rintro ‚ü®hz, h1, h2, h3‚ü©
    have hz' : 0 < z.im := by
      apply hz.lt_of_ne
      contrapose! h3
      simpa [‚Üê sq_lt_one_iff‚ÇÄ (norm_nonneg _), ‚Üê Complex.normSq_eq_norm_sq, Complex.normSq,
        ‚Üê h3, ‚Üê sq] using h2.trans_lt (by norm_num)
    exact ‚ü®‚ü®z, hz'‚ü©, ‚ü®‚ü®by simpa [Complex.normSq_eq_norm_sq], h2‚ü©, h1‚ü©, rfl‚ü©

/-- For any `y : ‚Ñù`, the standard fundamental domain truncated at height `y` is compact. -/
lemma isCompact_truncatedFundamentalDomain (y : ‚Ñù) :
    IsCompact (truncatedFundamentalDomain y) := by
  rw [Subtype.isCompact_iff, coe_truncatedFundamentalDomain, Metric.isCompact_iff_isClosed_bounded]
  constructor
  ¬∑ -- show closed
    apply (isClosed_le continuous_const Complex.continuous_im).inter
    apply (isClosed_le Complex.continuous_im continuous_const).inter
    apply (isClosed_le (continuous_abs.comp Complex.continuous_re) continuous_const).inter
    exact isClosed_le continuous_const continuous_norm
  ¬∑ -- show bounded
    rw [Metric.isBounded_iff_subset_closedBall 0]
    refine ‚ü®‚àö((1 / 2) ^ 2 + y ^ 2), fun z hz ‚Ü¶ ?_‚ü©
    simp only [mem_closedBall_zero_iff]
    refine le_of_sq_le_sq ?_ (by positivity)
    rw [Real.sq_sqrt (by positivity), Complex.norm_eq_sqrt_sq_add_sq, Real.sq_sqrt (by positivity)]
    apply add_le_add
    ¬∑ rw [sq_le_sq, abs_of_pos <| one_half_pos (Œ± := ‚Ñù)]
      exact hz.2.2.1
    ¬∑ rw [sq_le_sq‚ÇÄ hz.1 (hz.1.trans hz.2.1)]
      exact hz.2.1

/-- A function `‚Ñç ‚Üí ‚Ñù` which is invariant under `SL(2, ‚Ñ§)`, and bounded at `‚àû`, is bounded. -/
lemma exists_bound_of_invariant {E : Type*} [SeminormedAddCommGroup E]
    {f : ‚Ñç ‚Üí E} (hf_cont : Continuous f) (hf_infinity : IsBoundedAtImInfty f)
    (hf_inv : ‚àÄ (g : SL(2, ‚Ñ§)) œÑ, f (g ‚Ä¢ œÑ) = f œÑ) : ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ ‚â§ C := by
  obtain ‚ü®D, y, hDy‚ü© := isBoundedAtImInfty_iff.mp hf_infinity
  obtain ‚ü®E, hE‚ü© : ‚àÉ E, ‚àÄ x ‚àà truncatedFundamentalDomain y, ‚Äñf x‚Äñ ‚â§ E :=
    (isCompact_truncatedFundamentalDomain y).exists_bound_of_continuousOn hf_cont.continuousOn
  refine ‚ü®max D E, fun œÑ ‚Ü¶ ?_‚ü©
  obtain ‚ü®g, hg‚ü© := exists_smul_mem_fd œÑ
  rw [‚Üê hf_inv g œÑ]
  by_cases h : (g ‚Ä¢ œÑ).im ‚â§ y
  ¬∑ exact (hE _ ‚ü®hg, h‚ü©).trans <| le_max_right _ _
  ¬∑ exact (hDy _ (le_of_not_ge h)).trans <| le_max_left _ _

/-- A function `‚Ñç ‚Üí ‚Ñù` which is invariant under a finite-index subgroup of `SL(2, ‚Ñ§)`, and bounded
at all cusps, is bounded. -/
lemma exists_bound_of_subgroup_invariant {E : Type*} [SeminormedAddCommGroup E]
    {f : ‚Ñç ‚Üí E} (hf_cont : Continuous f)
    (hf_infinity : ‚àÄ (g : SL(2, ‚Ñ§)), IsBoundedAtImInfty fun œÑ ‚Ü¶ f (g ‚Ä¢ œÑ))
    {Œì : Subgroup SL(2, ‚Ñ§)} [Œì.FiniteIndex] (hf_inv : ‚àÄ g ‚àà Œì, ‚àÄ œÑ, f (g ‚Ä¢ œÑ) = f œÑ) :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ ‚â§ C := by
  -- marshall the info we have in terms of a function on the quotient
  let f' (œÑ) : SL(2, ‚Ñ§) ‚ß∏ Œì ‚Üí E := Quotient.lift (fun g ‚Ü¶ f (g‚Åª¬π ‚Ä¢ œÑ)) fun g h hgh ‚Ü¶ by
    obtain ‚ü®j, hj, hj'‚ü© : ‚àÉ j ‚àà Œì, h = g * j := by
      rw [‚Üê Quotient.eq_iff_equiv, Quotient.eq, QuotientGroup.leftRel_apply] at hgh
      exact ‚ü®g‚Åª¬π * h, hgh, (mul_inv_cancel_left g h).symm‚ü©
    simp only [hj', mul_inv_rev, mul_smul, hf_inv j‚Åª¬π (inv_mem hj)]
  have hf'_cont (Œ≥) : Continuous (f' ¬∑ Œ≥) := QuotientGroup.induction_on Œ≥ fun g ‚Ü¶ by
    simp [f']
    fun_prop
  have hf'_inv (œÑ) (g : SL(2, ‚Ñ§)) (Œ≥) : f' (g ‚Ä¢ œÑ) (g ‚Ä¢ Œ≥) = f' œÑ Œ≥ := by
    induction Œ≥ using QuotientGroup.induction_on
    simp [-sl_moeb, f', mul_smul]
  have hf'_infty (Œ≥) : IsBoundedAtImInfty (f' ¬∑ Œ≥) := Œ≥.induction_on fun h ‚Ü¶ hf_infinity h‚Åª¬π
  -- now take the sum over the quotient
  have : Fintype (SL(2, ‚Ñ§) ‚ß∏ Œì) := Subgroup.fintypeQuotientOfFiniteIndex
  -- Now the conclusion is very simple.
  obtain ‚ü®C, hC‚ü© := exists_bound_of_invariant (show Continuous (‚àë Œ≥, ‚Äñf' ¬∑ Œ≥‚Äñ) by fun_prop)
    (.sum fun i _ ‚Ü¶ (hf'_infty i).norm_left)
    (fun g œÑ ‚Ü¶ (Fintype.sum_equiv (MulAction.toPerm g) _ _ (by simp [-sl_moeb, hf'_inv])).symm)
  refine ‚ü®C, fun œÑ ‚Ü¶ le_trans ?_ (hC œÑ)‚ü©
  simpa [Real.norm_of_nonneg <| show 0 ‚â§ ‚àë Œ≥, ‚Äñf' œÑ Œ≥‚Äñ by positivity, -sl_moeb, f'] using
    Finset.univ.single_le_sum (fun Œ≥ _ ‚Ü¶ norm_nonneg (f' œÑ Œ≥)) (Finset.mem_univ ‚ü¶1‚üß)

end ModularGroup

/-- The integrand in the Petersson scalar product of two modular forms. -/
noncomputable def UpperHalfPlane.petersson (k : ‚Ñ§) (f f' : ‚Ñç ‚Üí ‚ÑÇ) (œÑ : ‚Ñç) :=
  conj (f œÑ) * f' œÑ * œÑ.im ^ k

lemma UpperHalfPlane.petersson_continuous (k : ‚Ñ§) {f f' : ‚Ñç ‚Üí ‚ÑÇ}
    (hf : Continuous f) (hf' : Continuous f') :
    Continuous (petersson k f f') := by
  apply ((Complex.continuous_conj.comp hf).mul hf').mul
  apply (Complex.continuous_ofReal.comp UpperHalfPlane.continuous_im).zpow‚ÇÄ
  exact fun œÑ ‚Ü¶ .inl <| Complex.ofReal_ne_zero.mpr œÑ.im_ne_zero

lemma UpperHalfPlane.petersson_slash (k : ‚Ñ§) (f f' : ‚Ñç ‚Üí ‚ÑÇ) (g : GL(2, ‚Ñù)‚Å∫) (œÑ : ‚Ñç) :
    petersson k (f ‚à£[k] g) (f' ‚à£[k] g) œÑ = (‚Üë‚Çò[‚Ñù] g).det ^ (k - 2) * petersson k f f' (g ‚Ä¢ œÑ) := by
  let D := (‚Üë‚Çò[‚Ñù] g).det
  have hD : (D : ‚ÑÇ) ‚â† 0 := Complex.ofReal_ne_zero.mpr <| Matrix.GLPos.det_ne_zero g
  let j := denom g œÑ
  calc petersson k (f ‚à£[k] g) (f' ‚à£[k] g) œÑ
  _ = conj (f (g ‚Ä¢ œÑ) * D ^ (k - 1) * j^(-k)) *
        (f' (g ‚Ä¢ œÑ) * D ^ (k - 1) * j ^ (-k)) * œÑ.im ^ k := rfl
  _ = D ^ (2 * k - 2) * conj (f (g ‚Ä¢ œÑ)) * (f' (g ‚Ä¢ œÑ)) * (œÑ.im ^ k * j.normSq ^ (-k)) := by
    simp only [Complex.normSq_eq_conj_mul_self, (by ring : 2 * k - 2 = (k - 1) + (k - 1)),
      zpow_add‚ÇÄ hD, mul_zpow, map_mul, map_zpow‚ÇÄ, Complex.conj_ofReal]
    ring
  _ = D ^ (k - 2) * (conj (f (g ‚Ä¢ œÑ)) * (f' (g ‚Ä¢ œÑ)) * (D * œÑ.im / j.normSq) ^ k) := by
    rw [div_zpow, mul_zpow, zpow_neg, div_eq_mul_inv, (by ring : 2 * k - 2 = k + (k - 2)),
      zpow_add‚ÇÄ hD]
    ring
  _ = D ^ (k - 2) * (conj (f (g ‚Ä¢ œÑ)) * (f' (g ‚Ä¢ œÑ)) * (im (g ‚Ä¢ œÑ)) ^ k) := by
    rw [im_smul_eq_div_normSq, Complex.ofReal_div, Complex.ofReal_mul]

lemma UpperHalfPlane.petersson_slash_SL (k : ‚Ñ§) (f f' : ‚Ñç ‚Üí ‚ÑÇ) (g : SL(2, ‚Ñ§)) (œÑ : ‚Ñç) :
    petersson k (f ‚à£[k] g) (f' ‚à£[k] g) œÑ = petersson k f f' (g ‚Ä¢ œÑ) := by
  simp [UpperHalfPlane.petersson_slash]

lemma UpperHalfPlane.IsZeroAtImInfty.petersson_isZeroAtImInfty_left
    (k : ‚Ñ§) (Œì : Subgroup SL(2, ‚Ñ§)) [Œì.FiniteIndex]
    {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] {f : F} (h_bd : IsZeroAtImInfty f)
    {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] (f' : F) :
    IsZeroAtImInfty (petersson k f f') := by
  unfold petersson
  simp only [IsZeroAtImInfty, ZeroAtFilter, ‚Üê Asymptotics.isLittleO_one_iff (F := ‚Ñù),
    ‚Üê Asymptotics.isLittleO_norm_left (E' := ‚ÑÇ), norm_mul, Complex.norm_conj]
  have hf' : IsBoundedAtImInfty f' := by simpa using ModularFormClass.bdd_at_infty f' 1
  simp only [mul_comm ‚Äñf _‚Äñ ‚Äñf' _‚Äñ, mul_assoc, norm_zpow, Complex.norm_real,
      Real.norm_of_nonneg (fun {œÑ : ‚Ñç} ‚Ü¶ œÑ.im_pos).le]
  rw [(by simp : (1 : ‚Ñù) = 1 * 1)]
  apply hf'.norm_left.mul_isLittleO
  obtain ‚ü®a, ha, haf‚ü© := h_bd.exp_decay_atImInfty
  refine (haf.norm_left.mul <| Asymptotics.isBigO_refl (fun œÑ ‚Ü¶ (im œÑ) ^ k) _).trans_isLittleO ?_
  rw [Asymptotics.isLittleO_one_iff]
  refine .comp (g := fun t ‚Ü¶ Real.exp (-a * t) * t ^ k) ?_ tendsto_comap
  exact (tendsto_rpow_mul_exp_neg_mul_atTop_nhds_zero k a ha).congr fun t ‚Ü¶ by norm_cast; ring

lemma UpperHalfPlane.IsZeroAtImInfty.petersson_isZeroAtImInfty_right
    (k : ‚Ñ§) (Œì : Subgroup SL(2, ‚Ñ§)) [Œì.FiniteIndex] {F : Type*}
    [FunLike F ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] {f f' : F}
    (h_bd : IsZeroAtImInfty f') : IsZeroAtImInfty (petersson k f f') := by
  have := h_bd.petersson_isZeroAtImInfty_left k Œì f
  rw [IsZeroAtImInfty, ZeroAtFilter, tendsto_zero_iff_norm_tendsto_zero] at this ‚ä¢
  refine this.congr fun œÑ ‚Ü¶ ?_
  simp only [petersson, norm_mul, Complex.norm_conj, mul_comm]

lemma SlashInvariantFormClass.petersson_smul {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)} {F F' : Type*}
    [FunLike F ‚Ñç ‚ÑÇ] [SlashInvariantFormClass F Œì k] {f : F}
    [FunLike F' ‚Ñç ‚ÑÇ] [SlashInvariantFormClass F' Œì k] {f' : F'}
    {g : SL(2, ‚Ñ§)} (hg : g ‚àà Œì) {œÑ : ‚Ñç} :
    petersson k f f' (g ‚Ä¢ œÑ) = petersson k f f' œÑ := by
  simpa [‚Üê ModularForm.SL_slash, SlashInvariantFormClass.slash_action_eq _ _ hg]
    using (petersson_slash k f f' g œÑ).symm

lemma ModularFormClass.petersson_continuous (k : ‚Ñ§) (Œì : Subgroup SL(2, ‚Ñ§)) {F F' : Type*}
    [FunLike F ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k]
    [FunLike F' ‚Ñç ‚ÑÇ] [ModularFormClass F' Œì k] (f : F) (f' : F') :
    Continuous (petersson k f f') :=
  UpperHalfPlane.petersson_continuous k
    (ModularFormClass.holo f).continuous (ModularFormClass.holo f').continuous

/-- If `f` is a cusp form and `f'` a modular form, then `petersson k f f'` is bounded. -/
lemma CuspFormClass.petersson_bounded_left
    (k : ‚Ñ§) (Œì : Subgroup SL(2, ‚Ñ§)) [Œì.FiniteIndex] {F F' : Type*} (f : F) (f' : F')
    [FunLike F ‚Ñç ‚ÑÇ] [FunLike F' ‚Ñç ‚ÑÇ] [CuspFormClass F Œì k] [ModularFormClass F' Œì k] :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñpetersson k f f' œÑ‚Äñ ‚â§ C := by
  refine ModularGroup.exists_bound_of_subgroup_invariant (Œì := Œì)
      (ModularFormClass.petersson_continuous k Œì f f') (fun g ‚Ü¶ ?_)
      fun g hg œÑ ‚Ü¶ SlashInvariantFormClass.petersson_smul hg
  apply IsZeroAtImInfty.isBoundedAtImInfty
  simp_rw [‚Üê UpperHalfPlane.petersson_slash_SL]
  let Œì' : Subgroup SL(2, ‚Ñ§) := Subgroup.map (MulAut.conj g‚Åª¬π) Œì
  let ft‚ÇÄ : CuspForm Œì' k := CuspForm.translate f g
  have : Œì'.FiniteIndex := by
    constructor
    rw [Œì.index_map_of_bijective (EquivLike.bijective _)]
    apply Subgroup.FiniteIndex.index_ne_zero
  convert UpperHalfPlane.IsZeroAtImInfty.petersson_isZeroAtImInfty_left k Œì'
    (by simpa using CuspFormClass.zero_at_infty ft‚ÇÄ 1)
    (ModularForm.translate f' g) -- "exact" fails here -- why?

/-- If `f` is a modular form and `f'` a cusp form, then `petersson k f f'` is bounded. -/
lemma CuspFormClass.petersson_bounded_right
    (k : ‚Ñ§) (Œì : Subgroup SL(2, ‚Ñ§)) [Œì.FiniteIndex] {F F' : Type*} (f : F) (f' : F')
    [FunLike F ‚Ñç ‚ÑÇ] [FunLike F' ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] [CuspFormClass F' Œì k] :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñpetersson k f f' œÑ‚Äñ ‚â§ C := by
  simpa [petersson, mul_comm] using petersson_bounded_left k Œì f' f

/-- A weight `k` cusp form is bounded in norm by `(im œÑ) ^ (k / 2)`. -/
lemma CuspFormClass.exists_bound {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)} [Œì.FiniteIndex]
    {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [CuspFormClass F Œì k] (f : F) :
    ‚àÉ C, ‚àÄ œÑ, ‚Äñf œÑ‚Äñ * œÑ.im ^ (k / 2 : ‚Ñù) ‚â§ C := by
  obtain ‚ü®C, hC‚ü© := petersson_bounded_left k Œì f f
  refine ‚ü®C.sqrt, fun œÑ ‚Ü¶ ?_‚ü©
  specialize hC œÑ
  rw [‚Üê Real.sqrt_le_sqrt_iff ((norm_nonneg _).trans hC)] at hC
  refine (le_of_eq ?_).trans hC
  simp only [petersson, norm_mul, Complex.norm_conj]
  rw [Real.sqrt_mul (by positivity), Real.sqrt_mul_self (by positivity), norm_zpow,
    Complex.norm_real, Real.sqrt_eq_rpow, ‚Üê Real.rpow_intCast_mul (by positivity), mul_one_div,
    Real.norm_of_nonneg œÑ.im_pos.le]
