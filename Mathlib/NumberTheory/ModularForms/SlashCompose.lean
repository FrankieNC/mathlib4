import Mathlib.NumberTheory.ModularForms.Basic
import Mathlib.Analysis.Complex.UpperHalfPlane.Manifold
import Mathlib.Analysis.Calculus.Deriv.ZPow

/-!
# Translation actions on modular forms

We show that if `f` is a slash-invariant form, modular form, or cusp form of level `Œì`, then its
translate by `g ‚àà SL(2, ‚Ñ§)` is a slash-invariant form (resp. modular form, cusp form) of level
`g‚Åª¬π Œì g`.

## Main definitions and statements

* `SlashInvariantForm.translate`
* `ModularFormClass.translate`
* `CuspFormClass.translate`

##¬†TO DO

Generalize this to `g ‚àà GL(2, ‚Ñö)‚Å∫`, showing that the translate is a modular form of level
`SL(2, ‚Ñ§) ‚à© g‚Åª¬π Œì g`. (This is somewhat subtle, because of the bounded-at-infinity condition.)
-/

open scoped MatrixGroups ModularForm UpperHalfPlane Manifold

/-- Translating a `SlashInvariantForm` by `SL(2, ‚Ñ§)`, to obtain a new `SlashInvariantForm`. -/
noncomputable def SlashInvariantForm.translate
    {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)} (f : SlashInvariantForm Œì k) (g : SL(2, ‚Ñ§)) :
    SlashInvariantForm (Œì.map <| MulAut.conj g‚Åª¬π) k where
  toFun := f ‚à£[k] g
  slash_action_eq' j hj := by
    obtain ‚ü®r, hr, hr'‚ü© := hj
    simp only [map_inv, MonoidHom.coe_coe, MulAut.conj_inv_apply] at hr'
    rw [‚Üê hr', ‚Üê SlashAction.slash_mul, mul_assoc, mul_inv_cancel_left, SlashAction.slash_mul,
      SlashInvariantFormClass.slash_action_eq f r hr]

@[simp]
lemma SlashInvariantForm.coe_translate
    {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)} (f : SlashInvariantForm Œì k) (g : SL(2, ‚Ñ§)) :
    ‚áë(f.translate g) = (‚áëf) ‚à£[k] g := rfl

lemma UpperHalfPlane.mdifferentiable_num (g : GL(2, ‚Ñù)‚Å∫) :
    MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (num g) :=
  (mdifferentiable_coe.const_smul _).add mdifferentiable_const

lemma UpperHalfPlane.mdifferentiable_denom (g : GL(2, ‚Ñù)‚Å∫) :
    MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (denom g) :=
  (mdifferentiable_coe.const_smul _).add mdifferentiable_const

lemma UpperHalfPlane.mdifferentiable_denom_zpow (g : GL(2, ‚Ñù)‚Å∫) (k : ‚Ñ§) :
    MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (denom g ¬∑ ^ k) := fun œÑ ‚Ü¶ by
  have := (differentiableAt_zpow (m := k)).mpr (Or.inl <| denom_ne_zero g œÑ)
  exact this.mdifferentiableAt.comp œÑ (mdifferentiable_denom g œÑ)

lemma UpperHalfPlane.mdifferentiable_inv_denom (g : GL(2, ‚Ñù)‚Å∫) :
    MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (fun œÑ ‚Ü¶ (denom g œÑ)‚Åª¬π) := by
  simpa using mdifferentiable_denom_zpow g (-1)

/-- Each element of `GL(2, ‚Ñù)‚Å∫` defines a continuous map `‚Ñç ‚Üí ‚Ñç`. -/
instance UpperHalfPlane.instContinuousGLPosSMul : ContinuousConstSMul GL(2, ‚Ñù)‚Å∫ ‚Ñç where
  continuous_const_smul g := by
    refine continuous_induced_rng.mpr ?_
    refine continuous_iff_continuousAt.mpr fun œÑ ‚Ü¶ .div ?_ ?_ (œÑ.denom_ne_zero g)
    ¬∑ exact (mdifferentiable_num g œÑ).continuousAt
    ¬∑ exact (mdifferentiable_denom g œÑ).continuousAt

/-- Each element of `GL(2, ‚Ñù)‚Å∫` defines a complex-differentiable map `‚Ñç ‚Üí ‚Ñç`. -/
lemma UpperHalfPlane.mdifferentiable_smul (g : GL(2, ‚Ñù)‚Å∫) :
    MDifferentiable ùìò(‚ÑÇ) ùìò(‚ÑÇ) (fun œÑ : ‚Ñç ‚Ü¶ g ‚Ä¢ œÑ) := fun œÑ ‚Ü¶ by
  refine mdifferentiableAt_iff_target.mpr ‚ü®(continuous_const_smul g).continuousAt, ?_‚ü©
  simpa [smulAux, Function.comp_def] using
    (mdifferentiable_num g œÑ).mul (mdifferentiable_inv_denom g œÑ)

/-- Translating a `ModularForm` by `SL(2, ‚Ñ§)`, to obtain a new `ModularForm`. -/
noncomputable def ModularFormClass.translate {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)}
    {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [ModularFormClass F Œì k] (f : F) (g : SL(2, ‚Ñ§)) :
    ModularForm (Œì.map <| MulAut.conj g‚Åª¬π) k where
  __ := SlashInvariantForm.translate f g
  bdd_at_infty' h := by simpa [SlashAction.slash_mul] using bdd_at_infty f (g * h)
  holo' := by
    simp only [SlashInvariantForm.coe_translate, SlashInvariantForm.coe_mk, ModularForm.SL_slash,
      ModularForm.slash_def]
    refine .mul (.mul ?_ mdifferentiable_const) (UpperHalfPlane.mdifferentiable_denom_zpow g _)
    exact (holo f).comp (UpperHalfPlane.mdifferentiable_smul g)

@[simp]
lemma ModularFormClass.coe_translate {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)} {F : Type*} [FunLike F ‚Ñç ‚ÑÇ]
    [ModularFormClass F Œì k] (f : F) (g : SL(2, ‚Ñ§)) :
    ‚áë(ModularFormClass.translate f g) = (‚áëf) ‚à£[k] g := rfl

/-- Translating a `CuspForm` by `SL(2, ‚Ñ§)`, to obtain a new `CuspForm`. -/
noncomputable def CuspFormClass.translate {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)}
    {F : Type*} [FunLike F ‚Ñç ‚ÑÇ] [CuspFormClass F Œì k] (f : F) (g : SL(2, ‚Ñ§)) :
    CuspForm (Œì.map <| MulAut.conj g‚Åª¬π) k where
  __ := ModularFormClass.translate f g
  zero_at_infty' h := by simpa [SlashAction.slash_mul] using zero_at_infty f (g * h)

@[simp]
lemma CuspFormClass.coe_translate {k : ‚Ñ§} {Œì : Subgroup SL(2, ‚Ñ§)} {F : Type*} [FunLike F ‚Ñç ‚ÑÇ]
    [CuspFormClass F Œì k] (f : F) (g : SL(2, ‚Ñ§)) :
    ‚áë(CuspFormClass.translate f g) = (‚áëf) ‚à£[k] g := rfl
